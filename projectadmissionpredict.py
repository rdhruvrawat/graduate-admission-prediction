# -*- coding: utf-8 -*-
"""projectadmissionpredict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12XmmqQvyNS5TJCDtNU7QQPbOTu0-py0C
"""

import pandas as pd

from google.colab import files
uploaded = files.upload()

data = pd.read_csv('Admission_Predict.csv')

data.head()

data.tail()

data.shape

data.info()

data.isnull()

data.describe()

data.columns

data=data.drop('Serial No.',axis=1)

data.columns

data.head()

data.columns

X = data.drop('Chance of Admit ',axis=1)

X

Y = data['Chance of Admit ']

Y

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.20,random_state=42)

X_train

Y_train

data.head()

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.20,random_state=42)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()

X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

X_train

data.head()

from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor

lr = LinearRegression()
lr.fit(X_train,Y_train)

svm = SVR()
svm.fit(X_train,Y_train)

rf = RandomForestRegressor()
rf.fit(X_train,Y_train)

gr = GradientBoostingRegressor()
gr.fit(X_train,Y_train)

Y_pred1 = lr.predict(X_test)
Y_pred2 = svm.predict(X_test)
Y_pred3 = rf.predict(X_test)
Y_pred4 = gr.predict(X_test)

from sklearn import metrics

metrics.r2_score(Y_test,Y_pred1)

score1 = metrics.r2_score(Y_test,Y_pred1)
score2 = metrics.r2_score(Y_test,Y_pred2)
score3 = metrics.r2_score(Y_test,Y_pred3)
score4 = metrics.r2_score(Y_test,Y_pred4)

print(score1,score2,score3,score4)

final_data = pd.DataFrame({'Models':['LR','SVR','RF','GR'],'R2 Score':[score1,score2,score3,score4]})

final_data

import seaborn as sns

sns.barplot(x=final_data['Models'],y=final_data['R2 Score'])

import numpy as np

Y_train = [1 if value>0.8 else 0 for value in Y_train]
Y_test = [1 if value>0.8 else 0 for value in Y_test]

Y_train = np.array(Y_train)
Y_test = np.array(Y_test)

Y_train

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score

lr = LogisticRegression()
lr.fit(X_train,Y_train)
Y_pred1 = lr.predict(X_test)
print(accuracy_score(Y_test,Y_pred1))

svm = SVC()
svm.fit(X_train,Y_train)
Y_pred2 = svm.predict(X_test)
print(accuracy_score(Y_test,Y_pred2))

knn=KNeighborsClassifier()
knn.fit(X_train,Y_train)
Y_pred3 = knn.predict(X_test)
print(accuracy_score(Y_test,Y_pred3))

rf = RandomForestClassifier()
rf.fit(X_train,Y_train)
Y_pred4 = rf.predict(X_test)
print(accuracy_score(Y_test,Y_pred4))

gr = GradientBoostingClassifier()
gr.fit(X_train,Y_train)
Y_pred5 = gr.predict(X_test)
print(accuracy_score(Y_test,Y_pred5))

final_data = pd.DataFrame({'Models':['LR','SVM','KNN','RF','GBC'],'ACC_SCORE':[accuracy_score(Y_test,Y_pred1),
                                                                               accuracy_score(Y_test,Y_pred2),
                                                                               accuracy_score(Y_test,Y_pred3),
                                                                               accuracy_score(Y_test,Y_pred4),
                                                                               accuracy_score(Y_test,Y_pred5)]})

import seaborn as sns

sns.barplot(x=final_data['Models'], y=final_data['ACC_SCORE'])

X= data.drop('Chance of Admit ',axis=1)
Y = data['Chance of Admit ']

Y = [1 if value>0.8 else 0 for value in Y]

Y = np.array(Y)

Y

X=sc.fit_transform(X)

X

gr = GradientBoostingClassifier()
gr.fit(X,Y)

import joblib

joblib.dump(gr,'admission_model')

model = joblib.load('admission_model')

data.columns

model.predict(sc.transform([[337,118,4,4.5,4.5,9.65,1]]))

from tkinter import *
import joblib
from sklearn.preprocessing import StandardScaler

import gradio as gr
import numpy as np

def predict_admission(gre, toefl, university_rating, sop, lor, cgpa, research):
    score = np.mean([gre, toefl, university_rating, sop, lor, cgpa, research])
    if score > 7.5:
        return "High Chance of Getting Admission"
    else:
        return "You May Get Admission"

inputs = [
    gr.Number(label="GRE Score"),
    gr.Number(label="TOEFL Score"),
    gr.Number(label="University Rating"),
    gr.Number(label="SOP"),
    gr.Number(label="LOR"),
    gr.Number(label="CGPA"),
    gr.Number(label="Research (0 or 1)")
]

output = gr.Textbox()

app = gr.Interface(fn=predict_admission, inputs=inputs, outputs=output, title="Graduate Admission Predictor")
app.launch()